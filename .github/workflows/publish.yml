name: Publish
env:
  DEBUG: napi:*
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  BIN_FILES: packages/**/*.node
  BUILD_CRATE_BIN: ./*packages/**/*.node
  BUILD_CRATE_JS: ./*packages/**/binding.*
permissions:
  contents: write
  id-token: write
on:
  push:
    tags: 
      - 'v*'
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build:crate --target x86_64-apple-darwin
              pnpm build:npm
              strip -x $BIN_FILES
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              pnpm build:crate --target aarch64-apple-darwin
              strip -x $BIN_FILES
            architecture: arm64
          - host: windows-latest
            build: |
              pnpm build:crate --target x86_64-pc-windows-msvc
              pnpm build:npm
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: windows-latest
            setup: pnpm config set supportedArchitectures.cpu "ia32"
            build: |
              pnpm build:crate --target i686-pc-windows-msvc
              pnpm build:npm
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e && unset CC_x86_64_unknown_linux_gnu && unset CC &&
              pnpm build:crate --target x86_64-unknown-linux-gnu &&
              pnpm build:npm 
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -e
              git config --global --add safe.directory /build
              pnpm build 
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
            build: |
              pnpm build:crate --target riscv64gc-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup target add aarch64-unknown-linux-gnu &&
              export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc
              pnpm build:crate --target aarch64-unknown-linux-gnu 
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
              pnpm config set supportedArchitectures.cpu "arm"
            build: |
              pnpm build:crate --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip $BIN_FILES
              pnpm build:npm
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              pnpm build:crate --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip $BIN_FILES
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: |
              pnpm build:crate --target armv7-linux-androideabi
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip $BIN_FILES
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              pnpm build:crate --target aarch64-unknown-linux-musl 
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              pnpm build:crate --target aarch64-pc-windows-msvc
        node: 
          - '20'
    name: build - ${{ matrix.settings.target }} - node@${{ matrix.node }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm
          architecture: ${{ matrix.settings.architecture }}
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm i -g npm && pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.BUILD_CRATE_BIN }}
            ${{ env.BUILD_CRATE_JS }}
          if-no-files-found: error
  build-freebsd:
    runs-on: macos-14
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.24.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '13.2'
          memory: 8G
          cpu_count: 3
          environment_variables: 'DEBUG RUSTUP_IO_THREADS'
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            sudo npm install -g corepack
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain beta
            corepack prepare
            corepack enable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ pnpm --version ~~~~"
            pnpm --version
            pwd
            whoami
            env
            freebsd-version
            pnpm install
            pnpm build
            rm -rf ./**/node_modules
            rm -rf ./**/target
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: |
            ${{ env.BUILD_CRATE_BIN }}
            ${{ env.BUILD_CRATE_JS }}
          if-no-files-found: error
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
      - name: List binaries
        run: ls -R packages/**/*.node
      - name: Combine binaries
        run: pnpm universal -d ./
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: |
            ${{ env.BUILD_CRATE_BIN }}
            ${{ env.BUILD_CRATE_JS }}
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-freebsd
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: pnpm
      - name: Install dependencies
        run: pnpm i -g npm && pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Move artifacts
        run: node scripts/artifacts.mjs && pnpm artifacts
      - name: List packages
        run: ls -R packages/**/npm && ls -R packages/*/*.js
        shell: bash
      - name: Build JS
        run: pnpm build:npm
      - name: Setup npm
        run: |
          npm config set provenance true
          npm config set access public
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
        env: 
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Enter prerelease
        if: ${{ contains(github.ref, 'beta') }}
        run: pnpm changeset pre enter beta
      - name: Publish
        run: |
          pnpm changeset version
          pnpm publish -r --filter "{packages/**}" --access public --no-git-checks
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore: bump versions"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
